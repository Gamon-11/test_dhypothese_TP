var.equal = TRUE))+
scale_y_continuous(limits=c(6,18))+
theme_minimal()+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b=10)),
plot.caption = element_text(hjust = c(0,1),
face = "bold"),
panel.grid.minor.y = element_blank())+
labs(title = "Distribution de la variable note 1\nen fonction du parcours",
subtitle = "Source : Simulation",
x = "Parcours",
y = "Note à l'examen 1",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
dataset %>%
ggplot(mapping = aes(x = Parcours,
y = Note1))+
geom_violin(mapping = aes(fill = Parcours),
alpha = 0.5,
linetype = 1,
linewidth = 0.7,
bw = 0.7,
draw_quantiles = c(0.25,0.5,0.75))+
geom_jitter(mapping = aes(fill = Parcours),
shape = 21,
size = 2,
width = 0.1,
show.legend = FALSE)+
stat_summary(geom = "point",
fun = "mean",
size = 2,
shape = 22,
colour = "black",
fill = "black",
show.legend = FALSE)+
stat_summary(geom = "line",
fun = "mean",
group = 1,
linewidth = 1,
colour = "blue",
show.legend = FALSE)+
stat_compare_means(method = "t.test",
paired=FALSE,
geom = "text",
label.x = 0.5,
label.y = 18,
method.args = list(alternative = "greater",
var.equal = TRUE))+
scale_y_continuous(limits=c(6,18))+
theme_minimal()+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b=10)),
plot.caption = element_text(hjust = c(0,1),
face = "bold"),
panel.grid.minor.y = element_blank())+
labs(title = "Distribution de la variable note 1\nen fonction du parcours",
subtitle = "Source : Simulation",
x = "Parcours",
y = "Note à l'examen 1",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
dataset %>%
select(Parcours, Note2) %>%
ggdensity(x = "Note2",
add = "mean",
rug = TRUE,
color = "Parcours",
fill = "Parcours",
alpha = 0.3,
palette = c("#FF3D00", "#5C6BC0")) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b = 10)),
plot.caption = element_text(hjust = c(0, 1),
face = "bold")) +
labs(title = "Distribution de la note de l'examen 1\nselon le type de parcours des étudiants",
subtitle = "Source : simulation",
x = "Note 2",
y = "Densité",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
dataset %>%
group_by(Parcours) %>%
group_map(.data = .,
.f = ~shapiro.test(.x$Note2)) %>%
setNames(nm = levels(dataset$Parcours))
dataset %>%
ggplot(mapping = aes(colour = Parcours,
fill = Parcours)) +
geom_abline(slope = 1,
intercept = 0,
linetype = 2,
colour = "black") +
stat_qq_point(mapping = aes(sample = Note2),
qtype = 4,
size = 2) +
stat_qq_line(mapping = aes(sample = Note2)) +
stat_qq_band(mapping = aes(sample = Note2),
colour = "white",
alpha = 0.2,
bandType = "boot") +
facet_wrap(facets = "Parcours") +
theme_bw() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b = 10)),
plot.caption = element_text(hjust = c(0, 1),
face = "bold")) +
labs(title = "Représentation des Quantile-Quantile Plots",
subtitle = "Source : simulation",
x = "Quantiles Théoriques",
y = "Quantiles Empiriques",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
dataset %>%
ggplot(mapping = aes(colour = Parcours,
fill = Parcours)) +
geom_abline(slope = 1,
intercept = 0,
linetype = 2,
colour = "black") +
stat_qq_point(mapping = aes(sample = Note2),
qtype = 4,
size = 2) +
stat_qq_line(mapping = aes(sample = Note2)) +
stat_qq_band(mapping = aes(sample = Note2),
colour = "white",
alpha = 0.2,
bandType = "boot") +
theme_bw() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b = 10)),
plot.caption = element_text(hjust = c(0, 1),
face = "bold")) +
labs(title = "Représentation des Quantile-Quantile Plots",
subtitle = "Source : simulation",
x = "Quantiles Théoriques",
y = "Quantiles Empiriques",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
dataset %>%
levene_test(formula = Not21 ~Parcours,
center = median)
dataset %>%
levene_test(formula = Note2 ~Parcours,
center = median)
dataset %>%
welch_test(formula = Note2 ~Parcours,
center = median)
dataset %>%
welsh_test(formula = Note2 ~Parcours,
center = median)
dataset %>%
welsh_test(formula = Note2 ~ Parcours, center = median)
library(ggstatsplot) # ggbetweenstats()
dataset %>%
welsh_test(formula = Note2 ~ Parcours, center = median)
dataset %>%
welch_anova_test(formula = Note2 ~ Parcours, center = median)
dataset %>%
welch_test(formula = Note2 ~ Parcours, center = median)
dataset %>%
t.test(Note2 ~ Parcours, data = dataset, var.equal = FALSE)
dataset %>%
t.test(Note2 ~ Parcours, data = dataset, var.equal = FALSE)
dataset %>%
levene_test(formula = Note2 ~Parcours,
center = median)
dataset %>%
t.test(Note2 ~ Parcours, var.equal = FALSE)
dataset %>%
summarise(t_test_result = list(t.test(Note2 ~ Parcours, var.equal = FALSE)))
dataset %>%
t.test(data = .,
Note2 ~ Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE)
dataset %>%
t.test(data = .,
Note2 ~ Parcours,
alternative = "two.sided",
paired = FALSE,
var.equal = TRUE)
dataset %>%
t.test(data = .,
Note2 ~ Parcours,
alternative = "two.sided",
paired = FALSE,
var.equal = TRUE)
dataset %>%
t.test(data = .,
Note2 ~ Parcours,
paired = FALSE,
var.equal = TRUE)
dataset %>%
ggplot(mapping = aes(x = Parcours,
y = Note2))+
geom_violin(mapping = aes(fill = Parcours),
alpha = 0.5,
linetype = 1,
linewidth = 0.7,
bw = 0.7,
draw_quantiles = c(0.25,0.5,0.75))+
geom_jitter(mapping = aes(fill = Parcours),
shape = 21,
size = 2,
width = 0.1,
show.legend = FALSE)+
stat_summary(geom = "point",
fun = "mean",
size = 2,
shape = 22,
colour = "black",
fill = "black",
show.legend = FALSE)+
stat_summary(geom = "line",
fun = "mean",
group = 1,
linewidth = 1,
colour = "blue",
show.legend = FALSE)+
stat_compare_means(method = "t.test",
paired=FALSE,
geom = "text",
label.x = 0.5,
label.y = 18,
method.args = list(alternative = "greater",
var.equal = TRUE))+
scale_y_continuous(limits=c(6,18))+
theme_minimal()+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b=10)),
plot.caption = element_text(hjust = c(0,1),
face = "bold"),
panel.grid.minor.y = element_blank())+
labs(title = "Distribution de la variable note 1\nen fonction du parcours",
subtitle = "Source : Simulation",
x = "Parcours",
y = "Note à l'examen 1",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
library(dplyr)
library(gginference)
install.packages("gginference")
library(gginference)
t.test(dataset$Note1 ~ dataset~Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE) -> resu1
t.test(dataset$Note1 ~ dataset~Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE) -> resu1
t.test(dataset$Note1 ~ dataset&Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE) -> resu1
t.test(dataset$Note1 ~ dataset$Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE) -> resu1
t.test(dataset$Note2 ~ dataset~Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE) -> resu2
par(mfrow=c(1,2))
t.test(dataset$Note2 ~ dataset~Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE) -> resu2
t.test(dataset$Note2 ~ dataset$Parcours,
alternative = "greater",
paired = FALSE,
var.equal = TRUE) -> resu2
ggttest(resu1)
library(gginference)
install.packages("gginference")
ggttest(resu1)
ggttest(resu2)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(purrr)
library(qqplotr)
library(rlang)
library(ggstatsplot)
library(rstatix) #t_test
library(ggstatsplot) # ggbetweenstats()
library(gginference)
ggttest(resu1)
par(mfrow=c(1,2))
ggttest(resu1)
ggttest(resu2)
ggttest(resu1)
ggttest(resu2)
par(mfrow=c(1,2))
ggttest(resu1)
ggttest(resu2)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(purrr)
library(qqplotr)
library(rlang)
library(ggstatsplot)
library(rstatix) #t_test
library(ggstatsplot) # ggbetweenstats()
library(gginference)
library(tidyr)
library(tibble)
readLines("../DataExperiment.csv",n=5)
readLines("../Data/Experiment.csv",n=5)
read.table(file= "../Data/Experiment.csv", header = TRUE)
read.table(file= "../Data/Experiment.csv", header = TRUE) -> dataset
dataset = read.table(file ="../Data/Notes.csv",header = TRUE, na.strings = "ABS")
head(dataset)
read.table(file= "../Data/Experiment.csv", header = TRUE) -> dataframe
#' =========================================================================== #
#' \begin{center} \bf{préparation des données} \end{center}
#' =========================================================================== #
dataframe |>
pivot_longer(cols= c(Weight_before,Weight_after),
names_to = "Treatment",
values_to = "weight",
names_pattern = "_(.*)") |>
mutate(Treatment = factor(Treatment, orderer = TRUE,
levels = c("before","after")))-> data
str(dataframe)
#' =========================================================================== #
#' \begin{center} \bf{préparation des données} \end{center}
#' =========================================================================== #
dataframe |>
pivot_longer(cols= c(Weight_before,Weight_after),
names_to = "Treatment",
values_to = "weight",
names_pattern = "_(.*)") |>
mutate(Treatment = factor(Treatment,
ordered = TRUE,
levels = c("before","after")))-> data
str(data)
data |>
group_by(Treatment) |>
summarize(count=n(),
Mean = mean(Weight, na.rm = TRUE),
sd = sd(Weight,na.rm = TRUE))
data |>
group_by(Treatment) |>
summarize(count=n(),
Mean = mean(weight, na.rm = TRUE),
sd = sd(Weight,na.rm = TRUE))
data |>
group_by(Treatment) |>
summarize(count=n(),
Mean = mean(weight, na.rm = TRUE),
sd = sd(weight,na.rm = TRUE))
data |>
group_by(Treatment) |>
summarize(count=n(),
Mean = mean(weight, na.rm = TRUE),
sd = sd(weight,na.rm = TRUE))
data |>
ggplot(mapping = aes(x = Treatment,
y = Weight))+
geom_violin(mapping = aes(fill=Treatment),
alpha = 0.3)+
geom_point(mapping = aes(fill = Treatment),
shape = 21,
size = 2,
colour = "black",
show.legend = FALSE)+
scale_x_discrete(labels=c("Avant","Aprés"))+
scale_fill_manual(name = "Traitement",
values = c("purple","yellow3"),
labels = c("Avant","Aprés"))+
geom_segment(data = data |>
pivot_wider(names_from = Treatment,
values_from = Weight,
values_fn = list)|>
unnest(cols = c("before","after")),
mapping = aes(x = 1,
xend = 2,
y = before,
yend = after))+
theme_minimal()+
theme(legend.position = "bottom",
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b=10)),
plot.caption = element_text(hjust = c(0,1),
face = "bold"))+
labs(title = "Évaluation du poids avant et aprés traitement",
subtitle = "Source : Simulation",
x = "Traitement",
y = "Poids",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
str(data)
data |>
group_by(Treatment) |>
summarize(count=n(),
Mean = mean(weight, na.rm = TRUE),
sd = sd(weight,na.rm = TRUE))
data |>
ggplot(mapping = aes(x = Treatment,
y = weight))+
geom_violin(mapping = aes(fill=Treatment),
alpha = 0.3)+
geom_point(mapping = aes(fill = Treatment),
shape = 21,
size = 2,
colour = "black",
show.legend = FALSE)+
scale_x_discrete(labels=c("Avant","Aprés"))+
scale_fill_manual(name = "Traitement",
values = c("purple","yellow3"),
labels = c("Avant","Aprés"))+
geom_segment(data = data |>
pivot_wider(names_from = Treatment,
values_from = weight,
values_fn = list)|>
unnest(cols = c("before","after")),
mapping = aes(x = 1,
xend = 2,
y = before,
yend = after))+
theme_minimal()+
theme(legend.position = "bottom",
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b=10)),
plot.caption = element_text(hjust = c(0,1),
face = "bold"))+
labs(title = "Évaluation du poids avant et aprés traitement",
subtitle = "Source : Simulation",
x = "Traitement",
y = "Poids",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
#' =========================================================================== #
#' \begin{center} \bf{Analyse exploratoire des données} \end{center}
#' =========================================================================== #
data |>
pivot_wider(names_from = Treatment,
values_from = weight,
values_fn = list)|>
unnest(cols = c("before","after"))|>
mutate(diff = after - before) -> global.data
str(global.data)
data |>
pivot_wider(names_from = Treatment,
values_from = weight,
values_fn = list)|>
unnest(cols = c("before","after"))|>
mutate(diff = after - before) -> global.data
data |>
pivot_wider(names_from = Treatment,
values_from = weight,
values_fn = list)|>
unnest(cols = c("before","after"))|>
mutate(diff = after - before) -> global.data
str(global.data)
global.data|>
ggplot(mapping = aes(x = diff))+
geom_density(fill = "pink",
alpha = 0.4,
bw = 8)+
theme_minimal()+
theme(panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5,
face = "bold",
size = 15),
plot.subtitle = element_text(hjust = 0.5,
colour = "red4",
margin = margin(b=10)),
plot.caption = element_text(hjust = c(0,1),
face = "bold"))+
labs(title = "Distribution de la variable 'diff = after - before'",
subtitle = "Source : Simulation",
x = "Différence de poids entre avant et après traitement",
y = "Densité",
caption = c("BUT Science des Données", "Auteur : Maxime Gamondele"))
